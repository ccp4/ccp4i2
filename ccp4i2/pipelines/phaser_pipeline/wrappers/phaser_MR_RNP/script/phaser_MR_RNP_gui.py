"""
    pipelines/phaser_pipeline/wrappers/phaser_MR/script/phaser_MR_gui.py
    Copyright (C) 2014 Newcastle University
    Author: Martin Noble
    
    """

from qtgui.CCP4TaskWidget import CTaskWidget
from PySide2 import QtCore

#-------------------------------------------------------------------
class phaser_MR_RNP_gui(CTaskWidget):
    #-------------------------------------------------------------------
    
    # Subclass CTaskWidget to give specific task window
    TASKNAME = 'phaser_MR_RNP'
    TASKVERSION = 0.1
    TASKMODULE='test'
    TASKTITLE='Run rigid body refinement - PHASER'
    DESCRIPTION = '''Rigid body refinement usng PHASER in MR_RNP mode'''

    def __init__(self,parent):
        CTaskWidget.__init__(self,parent)

    def setDefaultParameters(self):
        # Reimplement in tasks to set initial parameters
        # read ccp4/src/phaser/source/phaser/defaults for defaults
        pass
        
    def drawContents(self):
        self.setProgramHelpFile('phaser')
        self.drawPhaserFrontPage()
        self.openFolder(folderFunction='keywords', title='Keywords', drawFolder=self.drawPhaserKeywordsFolder)
    
    def drawPhaserKeywordsFolder(self):
        #From here on, GUI is autogenerated from the keywords container
        self.openFolder(folderFunction='keywords', title='Keywords')
        self.openSubFrame()
        self.autoGenerate(container=self.container.keywords,selection={'includeParameters' : ['TARG_TRAN','TARG_TRAN_TYPE','JOBS','DEBUG','FORM','TOPF']})
        self.closeSubFrame()
    
    def drawPhaserKnownStructureFolder(self):
        #Open a folder to deal with UI for known solutions
        self.createLine(['advice','Files containing solutions from a previous run of phaser can be input here'])
        self.createLine(['advice','BEWARE - ensemble names must correspond to those used in the Ensemble list'])
        self.createLine(['advice','If a valid file is selected here, the elements to extract for this run can be changed below'])
        self.createLine( [ 'widget', '-browseDb', True, 'SOLIN' ] )
        self.container.inputData.SOLIN.dataChanged.connect(self.handleSelectSolFile)
        self.createLine(['advice',''])
        self.createLine(['widget','-title','Elements of the sol file selected above','USINGSOLELEMENTS'])
        self.getWidget('USINGSOLELEMENTS').setListVisible(visible=True)
        self.getWidget('USINGSOLELEMENTS').setEditorVisible(visible=False)

    def drawPhaserFrontPage(self):
        self.openFolder(folderFunction='inputData')
        
        self.openSubFrame()
        self.createLine( ['subtitle', 'Reflections' ])
        self.createLine ( [ 'widget', 'F_SIGF' ] )
        self.createLine (['label','Resolution range','stretch','widget','RESOLUTION_LOW','widget','RESOLUTION_HIGH'])
        self.closeSubFrame()

        self.createLine( ['tip','Phaser uses this for maximum likelihood and to suggest number of copies in the asymmetric unit','subtitle', 'Composition' ])
        self.openSubFrame(frame=True)
        self.setMenuText('COMP_BY',{ 'DEFAULT':'Use protein average solvent content',
                         'MW':'Provide an estimate of the molecular weight of protein and nucleic acid in ASU',
                         'ASU':'Provide a full specification of the ASU content by sequence'
                         })
        self.createLine ( ['tip','Phaser uses this for maximum likelihood and to suggest number of copies in the asymmetric unit','label', 'For estimating asymmetric unit contents:','widget','COMP_BY'])
        self.container.inputData.COMP_BY.dataChanged.connect(self.handleCOMP_BY)
        self.handleCOMP_BY()
        self.createLine ( ['label', '\n '], toggle=['COMP_BY','open',['DEFAULT']])
         
        self.createLine ( [ 'widget', '-title','Contents of crystal', 'ASUFILE' ], toggle=['COMP_BY','open',['ASU']])
        self.createLine ( [ 'label','Molecular weight (Da) of protein in the ASU','stretch','widget', 'ASU_PROTEIN_MW' ], toggle=['COMP_BY','open',['MW']])
        self.createLine ( [ 'label','Molecular weight (Da) of nucleic acid','stretch','widget', 'ASU_NUCLEICACID_MW' ], toggle=['COMP_BY','open',['MW']])
        self.closeSubFrame()
        
        #Special widget for the input ensemble(s)
        self.createLine(['advice',''])
        self.createLine ( [  'widget', '-title','Search model(s) - click "Show list" if more than one copy or more than one search model','ENSEMBLES' ] )
    
    @QtCore.Slot()
    def handleSelectSolFile(self):
        #Empty the list of solutions to use
        elements = self.container.inputData.USINGSOLELEMENTS
        while len(elements) > 0: elements.remove(elements[-1])
        
        if self.container.inputData.SOLIN.isSet():
            with open(str(self.container.inputData.SOLIN.fullPath),'r') as file:
                import pickle
                resultObject = pickle.load(file)
                for solution in resultObject:
                    label = str(len(elements)) + ': '
                    for property in ['HALL', 'LLG', 'R', 'TFZ']:
                        value = getattr(solution,property,None)
                        if value is not None:
                            if property == 'HALL': label += ('Spacegroup : '+str(value)+' - ')
                            else: label += (property+' {0:.2f} '.format(float(value)) + ' ')
                    elements.append(elements.makeItem())
                    elements[-1] = label
                #for nd in solution.KNOWN:
                #componentNode = etree.SubElement(solutionNode,'COMPONENT')
                #node = self.subElementWithNameAndText(componentNode,'modlid',str(nd.getModlid()))
        self.validate()
        #Following update wil only work if the widget is "active" (i.e. interface is drawn as before the task is run)
        try: self.getWidget('USINGSOLELEMENTS').updateViewFromModel()
        except: pass

    @QtCore.Slot()
    def handleCOMP_BY(self):
        self.container.inputData.ASUFILE.setQualifiers({'allowUndefined':(str(self.container.inputData.COMP_BY) != "ASU")})            
        self.validate()

    def isValid(self):
        #Here override logic of whether this is a valid task to allow for CSeqDataFile from the
        #CASUComponentList being required ONLY IF COMP_BY has the value "ASU"
        invalidElements = CTaskWidget.isValid(self)
        from core import CCP4ModelData, CCP4XtalData
        widgLib = {"COMP_BY":"Not set yet"}
        self.getParams(widgLib)
        if widgLib["COMP_BY"] != "ASU":
            invalidElements = [invalidElement for invalidElement in invalidElements if (type(invalidElement) != CCP4XtalData.CAsuComponent and type(invalidElement) != CCP4ModelData.CSeqDataFile)]
        
        #Length of "solution elements" list can take any value if SOLIN is not set
        if not self.container.inputData.SOLIN.isSet():
            if self.container.inputData.USINGSOLELEMENTS in invalidElements:
                invalidElements.remove(self.container.inputData.USINGSOLELEMENTS)
        return invalidElements

