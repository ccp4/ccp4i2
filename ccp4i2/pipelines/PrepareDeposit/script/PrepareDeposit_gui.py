from __future__ import print_function

"""
    PrepareDeposit_gui.py
    Copyright (C) 2015 Newcastle University
    Author: Martin Noble
    
    """

from PySide2 import QtGui, QtWidgets,QtCore

from qtgui.CCP4TaskWidget import CTaskWidget

#-------------------------------------------------------------------
class PrepareDeposit_gui(CTaskWidget):
    #-------------------------------------------------------------------
    TASKMODULE = 'test'       # Where this plugin will appear on the gui
    TASKTITLE = 'Prepare files for deposition'     # A short title for gui menu
    DESCRIPTION = 'Prepare files for deposition'
    TASKVERSION = 0.1
    TASKNAME = 'PrepareDeposit'
    
    def drawContents(self):        
        self.openFolder(folderFunction='inputData')
        
        self.createLine(['label','Refinement in final step used reflection','stretch','widget','USINGIORF'])
        self.container.inputData.USINGIORF.dataChanged.connect(self.affectsReflectionContentFlag)
        
        #self.createLine(['label','Final refinement step exploited anomalous','stretch','widget','USINGANOMALOUS'])
        self.container.inputData.USINGANOMALOUS.dataChanged.connect(self.affectsReflectionContentFlag)
        
        self.createLine(['label','Provide sequences of crystallized species','stretch','widget','PROVIDESEQUENCES'])
        self.container.inputData.PROVIDESEQUENCES.dataChanged.connect(self.handleProvideSequences)
        self.createLine(['widget','-title','AU content - sequences','ASUIN'],toggle=['PROVIDESEQUENCES','open',[True]])
        
        self.createLine(['label','Provide Refined TLS parameters','stretch','widget','PROVIDETLS'])
        self.container.inputData.PROVIDETLS.dataChanged.connect(self.handleTLS)
        self.createLine(['widget','-title','Refined TLS parameter object','TLSIN'],toggle=['PROVIDETLS','open',[True]])
        
        self.createLine(['label','Provide DICT file for ligand in structure','stretch','widget','PROVIDEDICT'])
        self.container.inputData.PROVIDEDICT.dataChanged.connect(self.handleDICT)
        self.openSubFrame(frame=[True], toggle=['PROVIDEDICT','open',[True]])
        self.createLine ( [ 'widget','DICT' ] )
        self.closeSubFrame()
        
        self.openSubFrame(frame=True, title="NEW: Allow ANISO use in zero cycle refinement")
        self.createLine ( [ 'label','Temperature factors','stretch','widget','B_REFINEMENT_MODE' ] )
        self.closeSubFrame()

        #From here on, GUI is autogenerated from the keywords container
        self.autoGenerate(container=self.container.inputData,selection={'excludeParameters' : ['USINGIORF','USINGANOMALOUS','PROVIDESEQUENCES','ASUIN','PROVIDEDICT','DICT','PROVIDETLS','TLSIN','OUTPUT_DIRECTORY','ISREFMACMMCIFOUTPUT','B_REFINEMENT_MODE','OUTPUTTYPE']})
        #Explain and provide UI fo rwhere to put output
        self.createLine(['advice',''])
        self.openSubFrame(frame=[True])
        self.createLine(['advice','Choose a directory in which to put "Reflections.cif" and "Coordinates.cif"'])
        self.createLine(['advice','which can be uploaded to the deposition service'])
        self.createLine(['widget','-jobCombo',False,'OUTPUT_DIRECTORY'])
        self.closeSubFrame()
    
    def showMolin(self):
        return self.container.inputData.PROVIDEMOL and not self.container.inputData.MOLSMILESORSKETCH != 'SMILES'

    @QtCore.Slot()
    def affectsReflectionContentFlag(self):
        if self.container.inputData.USINGIORF.__str__() == 'I':
            if self.container.inputData.USINGANOMALOUS: requiredContentFlag = 1
            else: requiredContentFlag = 3
        elif self.container.inputData.USINGIORF.__str__() == 'F':
            if self.container.inputData.USINGANOMALOUS: requiredContentFlag = 2
            else: requiredContentFlag = 4
        print(self.container.inputData.USINGIORF)
        print(self.container.inputData.USINGANOMALOUS)
        print(requiredContentFlag)
        self.container.inputData.F_SIGF.setQualifiers({'requiredContentFlag' : [requiredContentFlag]})

    @QtCore.Slot()
    def handleProvideSequences(self):
        self.container.inputData.ASUIN.setQualifiers({'allowUndefined' : (not bool(self.container.inputData.PROVIDESEQUENCES))})
    
    @QtCore.Slot()
    def handleTLS(self):
        if not self.container.inputData.PROVIDETLS:
            self.container.inputData.TLSIN.unSet()
            self.container.inputData.TLSIN.setQualifiers({'allowUndefined' : True})
        else:
            self.container.inputData.TLSIN.setQualifiers({'allowUndefined' : False})

    @QtCore.Slot()
    def handleDICT(self):
        if not self.container.inputData.PROVIDEDICT:
            self.container.inputData.DICT.unSet()
            self.container.inputData.DICT.setQualifiers({'allowUndefined' : True})
        else:
            self.container.inputData.DICT.setQualifiers({'allowUndefined' : False})
