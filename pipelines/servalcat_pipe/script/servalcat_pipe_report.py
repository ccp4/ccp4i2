import sys
from xml.etree import ElementTree as ET
from report.CCP4ReportParser import *

from wrappers.servalcat.script import servalcat_report
from wrappers.validate_protein.script import validate_protein_report
import base64


class servalcat_pipe_report(Report):
    # Specify which gui task and/or pluginscript this applies to
    TASKNAME = 'servalcat_pipe'
    TASKTITLE = 'Servalcat - Macromolecular refinement'
    RUNNING = True
    SEPARATEDATA = True
    def __init__(self, *args, **kw):
        super(servalcat_pipe_report, self).__init__(*args, **kw)
        self.outputXml = self.jobStatus is not None and self.jobStatus.lower().count('running')
        if self.jobStatus is not None and not self.jobStatus.lower().count('running'): self.outputXml = False
        if self.jobStatus is not None and self.jobStatus.lower() == 'nooutput': return
        if self.jobStatus is not None and self.jobStatus.lower() == 'unsatisfactory':
            self.drawUnsatisfactory(self)
        else:
            self.drawContents()

    def drawUnsatisfactory(self, parent=None):
        #Currently, the only "unsatisfactory" outcome is dur to ligand encountered whicl "make ligand exit" active
        if parent is None: parent = self
        parent.addDiv(style='clear:both;')
        parent.addText(text='Refmac died because it encountered a ligand not present in the monomer libraries it has read (i.e. the default CCP4 libraries plus any library you provided through the GUI). To continue, you have a number of options.')
        #parent.append('<br/>')
        #parent.addText(text='1) Review and accept the ligand dictionary autogenerated by refmac: if the following sketch , and the data presented by viewing the file "Pictures of ligand prepared by refmac" (see below)  suggest that the ligand has been appropriately characterised, then you can use the autogenerated library in a subsequent refmac job')
        parent.append('<br/>')
        parent.addText(text='1) Use the make ligand pipeline to generate an acedrg description of your ligand.  For now, the resulting ligand will need to be rebuilt into your model through Coot, since atom names may not match those in the original PDB file')
        parent.append('<br/>')
        parent.addText(text='2) View the input PDB file in Coot, and use COOT  to generate a ligand geometry dictionary.  This is a neat way to work and keep atom names consistent with the starting point.  Ligands generated through the coot ligand builder will be captured into the ccp4i2 database and can be exported from there on the coot task report page.')
        try:
            if len(self.xmlnode.findall('svg')) > 0:
                sketchDiv = parent.addDiv(style="width:350px; height:350px; border:1px solid black;")
                sketchDiv.append(ET.tostring(self.xmlnode.findall('.//svg')[0]))
        except:
            pass

    def drawContents(self):
        xmlnode = self.xmlnode
        self.addDiv(style='clear:both;')

        servalcatReport = None
        servalcatReport1 = None
        servalcatReportNode0 = None
        servalcatReportNode1 = None
        cootAddWatersNode = None
        try:
            servalcatReportNode0 = xmlnode.findall('.//SERVALCAT_FIRST')[0]
        except:
            pass
        if servalcatReportNode0 is not None:
            servalcatReport = servalcat_report.servalcat_report(xmlnode=servalcatReportNode0, jobStatus='nooutput', jobInfo=self.jobInfo)
            cycle_data = servalcatReport.getCycleData(xmlnode=servalcatReportNode0)
        try:
            servalcatReportNode1 = xmlnode.findall('.//SERVALCAT_WATERS')[0]
        except:
            pass
        if servalcatReportNode1 is not None:
            servalcatReport1 = servalcat_report.servalcat_report(xmlnode=servalcatReportNode1, jobStatus='nooutput', jobInfo=self.jobInfo)
            cycle_data1 = servalcatReport.getCycleData(xmlnode=servalcatReportNode1)
            servalcatReportNodeLast = servalcatReportNode1
        else:
            servalcatReportNodeLast = servalcatReportNode0
        try:
            cootAddWatersNode = xmlnode.findall('.//CootAddWaters')[0]
        except:
            pass

        clearingDiv = self.addDiv(style="clear:both;")

        # ProSMART results - if any
        possibleProsmartFile1 = os.path.normpath(os.path.join(self.jobInfo["fileroot"], "job_1", "ProSMART_Results.html"))
        possibleProsmartFile2 = os.path.normpath(os.path.join(self.jobInfo["fileroot"], "job_2", "ProSMART_Results.html"))
        if os.path.isfile(possibleProsmartFile1):
            projectid = self.jobInfo.get("projectid", None)
            jobNumber = self.jobInfo.get("jobnumber", None)
            possibleProsmartFile1i2Html = \
                "/database/?getProjectJobFile?projectId=" + projectid + "?fileName=ProSMART_Results.html?jobNumber=" + jobNumber + ".1"
            prosmartFold = self.addFold(label='ProSMART results', initiallyOpen=True, brief='Prosmart')
            prosmartFold.append('<span style="font-size:110%">HTML Results will be displayed in browser. </span>')
            prosmartFold.append(f'<a href="{possibleProsmartFile1i2Html}">Open Results</a>')
            if os.path.isfile(possibleProsmartFile2):
                possibleProsmartFile1i2Html = \
                    "/database/?getProjectJobFile?projectId=" + projectid + "?fileName=ProSMART_Results.html?jobNumber=" + jobNumber + ".2"
                prosmartFold.append('<br /><span style="font-size:110%">HTML Results will be displayed in browser. </span>')
                prosmartFold.append(f'<a href="{possibleProsmartFile1i2Html}">Open Results</a>')
            clearingDiv = self.addDiv(style="clear:both;")

        if servalcatReportNode0 is not None and not self.jobStatus.lower().count('running'): # Report when job is finished
            summaryFold = self.addFold(label='Summary of refinement', initiallyOpen=True, brief='Refinement')
            servalcatReport.addTablePerCycle(cycle_data, parent=summaryFold, initialFinalOnly=True)
            servalcatReport.addGraphPerCycle(parent=summaryFold)
            #if withTables:
            clearingDiv = self.addDiv(style="clear:both;")
            perCycleFold = self.addFold(label='Per cycle statistics', brief='Per cycle', initiallyOpen=False)
            servalcatReport.addTablePerCycle(cycle_data, parent=perCycleFold, initialFinalOnly=False)
            if hasattr(cootAddWatersNode, "text"):
                clearingDiv = self.addDiv(style="clear:both;")
                cootFold = self.addFold(label='Addition of water molecules using Coot', initiallyOpen=True, brief='Coot')
                cootFold.addText(text=cootAddWatersNode.text)
                clearingDiv = self.addDiv(style="clear:both;")
            if servalcatReportNode1:
                summaryFold1 = self.addFold(label='Summary of refinement after addition of water molecules', initiallyOpen=True, brief='Refinement after waters')
                servalcatReport1.addTablePerCycle(cycle_data1, parent=summaryFold1, initialFinalOnly=True)
                servalcatReport1.addGraphPerCycle(parent=summaryFold1)
                clearingDiv = self.addDiv(style="clear:both;")
                perCycleFold1 = self.addFold(label='Per cycle statistics after addition of water molecules', brief='Per cycle after waters', initiallyOpen=False)
                servalcatReport1.addTablePerCycle(cycle_data1, parent=perCycleFold1, initialFinalOnly=False)
            servalcatReport.addGraphsVsResolution(parent=self, xmlnode=servalcatReportNodeLast)
            validationFold = self.addFold ( label="Validation", initiallyOpen=False, brief='Validation' )
            indentDiv = validationFold.addDiv(style="margin-left:1.5em;")
            servalcatReport.addOutlierAnalysis(parent=indentDiv, xmlnode=servalcatReportNodeLast)
            self.validationReport(parent=indentDiv)
            self.addCoordADPDev()

        else:  # Report while running
            summaryFold = self.addFold(label='Servalcat refinement running...', initiallyOpen=True, brief='Refinement')
            servalcatReport.addGraphPerCycle(parent=summaryFold, xmlnode=servalcatReportNode0)
            if hasattr(cootAddWatersNode, "text"):
                clearingDiv = self.addDiv(style="clear:both;")
                cootFold = self.addFold(label='Addition of water molecules using Coot', initiallyOpen=True, brief='Coot')
                cootFold.addText(text = cootAddWatersNode.text)
                clearingDiv = self.addDiv(style="clear:both;")
            if servalcatReportNode1:
                summaryFold1 = self.addFold(label='Servalcat refinement running after addition of water molecules...', initiallyOpen=True, brief='Refinement after waters')
                servalcatReport1.addGraphPerCycle(parent=summaryFold1, xmlnode=servalcatReportNode1)


    def validationReport(self, parent=None):
        if parent is None:
            parent = self
        try:
            validateReport = None
            validateReportNode = self.xmlnode.findall(".//Validation")[0]
            if validateReportNode is not None:
                validateReport = validate_protein_report.validate_protein_report(xmlnode=validateReportNode, jobStatus='nooutput', jobInfo=self.jobInfo)

                try:
                    if len(validateReportNode.findall ( ".//Iris" )) > 0:
                        if validateReportNode.findall ( ".//Iris" )[0].text != "":
                            irisFold = parent.addFold ( label="Iris validation report", initiallyOpen=False, brief='Iris' )
                            irisdiv = irisFold.addDiv(style="clear:both; margin-top:30px; width:800px;")
                            validateReport.add_iris_panel(parent=irisFold)
                except:
                    self.addText("Warning - Iris report failed")

            if len(self.xmlnode.findall(".//ADP_ANALYSIS")) > 0:
                adpFold = parent.addFold(label='ADP analysis', initiallyOpen=False, brief='ADP')
                self.addAdpAnalysis(adpFold=adpFold)

                try:
                    if len(validateReportNode.findall ( ".//Molprobity" )) > 0:
                        if validateReportNode.findall ( ".//Molprobity" )[0].text != "":
                            molprobityFold = parent.addFold ( label="MolProbity analysis", initiallyOpen=False )
                            validateReport.add_molprobity(parent=molprobityFold)
                except:
                    self.addText("Warning - MolProbity analysis failed")

                try:
                    if len(validateReportNode.findall ( ".//Ramachandran" )) > 0:
                        if validateReportNode.findall ( ".//Ramachandran" )[0].text != "":
                            ramachandranFold = parent.addFold ( label="Ramachandran plots", initiallyOpen=False )
                            validateReport.add_ramachandran(parent=ramachandranFold)
                except:
                    self.addText("Warning - Ramachandran plot generation failed")           
                
        except:
            traceback.print_exc()
        clearingDiv = self.addDiv(style="clear:both;")


    def addAdpAnalysis(self, adpFold=None):
        if adpFold is None:
            adpFold = self.addFold(label='ADP analysis', initiallyOpen=False, brief='ADP')

        noteDiv = adpFold.addDiv(style='font-size:110%;font-style:italic')
        noteDiv.append("Note: Atoms with an occupancy of 0 and hydrogen atoms are not included in this analysis.")

        adpTable = adpFold.addTable ( select=".//ADP_ANALYSIS/chains", transpose=False, downloadable=True, id='adp_table' )
        adpTable.addData ( title = "Chain", select="*/name" )
        adpTable.addData ( title = "Min", select="*/min" )
        adpTable.addData ( title = "Q1", select="*/q1" )
        adpTable.addData ( title = "Median", select="*/med" )
        adpTable.addData ( title = "Med. abs. dev.", select="*/mad" )
        adpTable.addData ( title = "Q3", select="*/q3" )
        adpTable.addData ( title = "Max", select="*/max" )
        adpTable.addData ( title = "Mean", select="*/mean" )
        adpTable.addData ( title = "Std. dev.", select="*/std" )

        headerDiv = adpFold.addDiv(style='font-size:110%;font-weight:bold;')
        headerDiv.append("Average B-values per residue number for individual chains")

        graph_per_resi = adpFold.addFlotGraph(
            title="B values for individual residues",
            select=".//ADP_ANALYSIS/chains",
            style="height:330px; width:585px; border:0px; padding:10px; padding-left:15px; margin-right:15px;")
        i = 0
        for chain in self.xmlnode.findall(".//ADP_ANALYSIS/chains/chain"):
            chain_name = chain.get('name')
            if chain_name == "All":
                continue  # and i does not increase
            graph_per_resi.addData(title="residue_number", select="chain[@name='" + chain_name + "']/per_resi/data/resi")
            graph_per_resi.addData(title="B-values(main-chain)", select="chain[@name='" + chain_name + "']/per_resi/data/adp")
            graph_per_resi.addData(title="B-value(side-chain) ", select="chain[@name='" + chain_name + "']/per_resi/data/adp_sidechain")
            plotADP = graph_per_resi.addPlotObject()
            plotADP.append('title', "chain " + chain_name)
            plotADP.append('plottype', 'xy')
            plotADP.append('xlabel', 'residue number')
            plotADP.append('ylabel', 'B-value (A^2)')
            plotADP.append('legendposition', x=1, y=0)  # right bottom corner
            plotLine = plotADP.append('plotline', xcol=1 + i * 3, ycol=2 + i * 3)
            plotLine.append('symbolsize', '1')
            plotLine.append('linestyle', '.')
            plotLine.append('colour', 'blue')
            plotLine = plotADP.append('plotline', xcol=1 + i * 3, ycol=3 + i * 3)
            plotLine.append('symbolsize', '1')
            plotLine.append('linestyle', '.')
            plotLine.append('colour', 'red')
            i = i + 1

        headerDiv = adpFold.addDiv(style='font-size:110%;font-weight:bold;')
        headerDiv.append("B-value histogram for all and individual chains")

        ch_graph = adpFold.addFlotGraph ( title="B-value histograms", select=".//ADP_ANALYSIS/chains", style="height:330px; width:585px; border:0px; padding:10px; padding-left:15px; margin-right:15px;" )
        for i, chain in enumerate(self.xmlnode.findall(".//ADP_ANALYSIS/chains/chain")):
            chain_name = chain.get('name')
            ch_graph.addData ( title = "B-value_" + chain_name, select = "chain[@name='" + chain_name + "']/histogram/bin/adp" )
            ch_graph.addData ( title = "Count" , select = "chain[@name='" + chain_name + "']/histogram/bin/count" )
            p = ch_graph.addPlotObject()
            p.append( 'title', "B-value histogram - " + chain_name)
            plot_hist = p.append( 'barchart', col=1 + i * 2, tcol=2 + i * 2 )
            plot_hist.append ( 'xlabel' ).text = "B-value (A^2)"
            try:
                bin_first = self.xmlnode.findall(".//ADP_ANALYSIS/chains/chain[@name='" + chain_name + "']/histogram/bin/adp")[0].text
                bin_second = self.xmlnode.findall(".//ADP_ANALYSIS/chains/chain[@name='" + chain_name + "']/histogram/bin/adp")[1].text
                width = float(bin_second) - float(bin_first)
            except:
                width = 3
            plot_hist.append ( 'width' ).text = str(width)
            plot_hist.append ( 'colour' ).text = '#4682B4'

        outliersDiv = adpFold.addDiv(style='font-size:110%;')
        if len(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/iqr_factor")) > 0:
            outliersDiv.append("Atoms with a B-value lower than <i>the first quartile - " + \
                str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/iqr_factor")[0].text) + \
                " * interquartile_range</i> or higher than <i>the third quartile + " + \
                str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/iqr_factor")[0].text) + \
                " * interquartile_range</i> are reported below.")
        if len(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_low")) > 0:
            outliersLowDiv = outliersDiv.addDiv(style='font-size:110%;float:left;box-sizing:border-box;margin-right:1em')
            if float(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_low")[0].text) < 0:
                outliersLowDiv.append("No atoms with too<br />low B-value observed.")
            elif len(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/low/data")) == 0 and \
                    float(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_low")[0].text) > 0:
                outliersLowDiv.append("No atoms with a B-value<br />lower than " + \
                                      str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_low")[0].text) + " A<sup>2</sup> observed.")
            else:
                outliersLowDiv.append("Atoms with a B-value<br />lower than " + \
                                      str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_low")[0].text) + " A<sup>2</sup>:")
                outliersTable = outliersLowDiv.addTable ( select=".//ADP_ANALYSIS/outliers/low", transpose=False, downloadable=False, id='ADPoutliers_low_table' )
                outliersTable.addData ( title = "Atom", select="*/atom" )
                outliersTable.addData ( title = "B-value (&Aring;<sup>2</sup>)", select="*/adp" )
        if len(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_high")) > 0:
            outliersHighDiv = outliersDiv.addDiv(style='font-size:110%;float:right;box-sizing:border-box;margin-right:1em')
            if len(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/high/data")) == 0:
                outliersHighDiv.append("No atoms with a B-value<br />higher than " + \
                                       str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_high")[0].text) + " A<sup>2</sup> observed.")
            else:
                outliersHighDiv.append("Atoms with a B-value<br />higher than " + \
                                       str(self.xmlnode.findall(".//ADP_ANALYSIS/outliers/adp_limit_high")[0].text) + " A<sup>2</sup>:")
                outliersTable = outliersHighDiv.addTable ( select=".//ADP_ANALYSIS/outliers/high", transpose=False, downloadable=False, id='ADPoutliers_low_table' )
                outliersTable.addData ( title = "Atom", select="*/atom" )
                outliersTable.addData ( title = "B-value (&Aring;<sup>2</sup>)", select="*/adp" )
        clearingDiv = adpFold.addDiv(style="clear:both;")


    def addCoordADPDev(self, parent=None, xmlnode=None):
        if len(self.xmlnode.findall(".//COORD_ADP_DEV")) == 0:
            return
        if parent is None: parent = self
        if xmlnode is None: xmlnode = self.xmlnode
        devFold = parent.addFold(label="Changes in atom coordinates and ADPs", brief='Deviations')
        coordDevDiv = devFold.addDiv(style='font-size:110%;float:left;box-sizing:border-box;margin-right:1em')
        if len(xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordDevMean")) > 0:
            coordDevDiv.append("Average deviation of atom coordinates: " + \
                xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordDevMean")[0].text + " A.")
        if len(xmlnode.findall(".//COORD_ADP_DEV/COORD_DEV/atom")) > 0:
            coordDevDiv.append("Deviations of atom coordinates<br />higher than " + \
                xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordDevMinReported")[0].text + " A:")
            coordDevTable = coordDevDiv.addTable ( select=".//COORD_ADP_DEV/COORD_DEV", transpose=False, downloadable=False, id='coordDev_table' )
            coordDevTable.addData ( title = "Atom", select="*/AtomAddress" )
            coordDevTable.addData ( title = "Deviation of coordinates (&Aring;)", select="*/CoordDev" )
        else:
            if len(xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordDevMinReported")) > 0:
                coordDevDiv.append("No deviations of atom coordinates<br />higher than " + \
                    xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordDevMinReported")[0].text + " A.")
        ADPDevDiv = devFold.addDiv(style='font-size:110%;float:left;box-sizing:border-box')
        if len(xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/ADPAbsDevMean")) > 0:
            ADPDevDiv.append("Average absolute value of deviation of B-values: " + \
                xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/ADPAbsDevMean")[0].text + " A<sup>2</sup>.")
        if len(xmlnode.findall(".//COORD_ADP_DEV/ADP_DEV/atom")) > 0:
            ADPDevDiv.append("Deviations of B-values with an<br />absolute value higher than " + \
                xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordADPAbsMinReported")[0].text + " A<sup>2</sup>:")
            ADPDevTable = ADPDevDiv.addTable ( select=".//COORD_ADP_DEV/ADP_DEV", transpose=False, downloadable=False, id='ADPDev_table' )
            ADPDevTable.addData ( title = "Atom", select="*/AtomAddress" )
            ADPDevTable.addData ( title = "Deviation of B-values (&Aring;<sup>2</sup>)", select="*/ADPDev" )
        else:
            if len(xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordADPAbsMinReported")) > 0:
                ADPDevDiv.append("No deviations of B-values with<br />absolute value higher than " + \
                    xmlnode.findall(".//COORD_ADP_DEV/STATISTICS/coordADPAbsMinReported")[0].text + " A<sup>2</sup>.")
        clearingDiv = devFold.addDiv(style="clear:both;")
        

    def addProgressGraph(self, parent, xmlnode,internalId="SummaryGraph", tag="RefmacInProgress"):
        if len(self.xmlnode.findall(tag))>0:
            progressGraph = parent.addFlotGraph(title="Running servalcat",select=tag+"/Cycle",style="height:250px; width:400px;float:left;border:0px;",outputXml=self.outputXml,internalId=internalId)
            progressGraph.addData(title="Cycle",    select="number")
            progressGraph.addData(title="R_Factor", select="r_factor")
            progressGraph.addData(title="R_Free",  select="r_free")
            plot = progressGraph.addPlotObject()
            plot.append('title','Running servalcat R-factors')
            plot.append('plottype','xy')
            plot.append('yrange', rightaxis='false')
            plot.append( 'xlabel', 'Cycle' )
            plot.append( 'xintegral', 'true' )
            plot.append( 'ylabel', 'R-factor' )
            plot.append( 'rylabel', 'Geometry' )
            for coordinate, colour in [(2,'blue'),(3,'green')]:
                plotLine = plot.append('plotline',xcol=1,ycol=coordinate,rightaxis='false',colour=colour)

            rmsBonds = self.xmlnode.findall('.//'+tag+'/Cycle/rmsBonds')
            if len(rmsBonds)> 0:
                plot.append('yrange', rightaxis='true')
                cycleNodes = self.xmlnode.findall('.//'+tag+'/Cycle')
                data = []
                for cycleNode in cycleNodes:
                    try: data.append(cycleNode.findall('rmsBonds')[0].text)
                    except: data.append(None)
                progressGraph.addData(title="rmsBonds",  data=data)
                plotLine = plot.append('plotline',xcol=1,ycol=4,rightaxis='true',colour='red')

    def addProgressTable(self, parent, xmlnode,internalId='SummaryTable'):
        if internalId=='Table1PostCootRunning':
            tag = "RefmacPostCootInProgress"
        else:
            tag = "RefmacInProgress"
        progressTableDiv = parent.addDiv(style='border:0px solid black; height:250px; width:260px; float:left; margin-top:1px; margin-right:0px;overflow:auto;')
        if len(xmlnode.findall("RefmacInProgress"))>0:
            xmlPath = './/'+tag+'/Cycle'
            xmlNodes = xmlnode.findall(xmlPath)
            nCycles = len(xmlNodes)
            print("addProgressTable nCycles",nCycles)
            if nCycles>0:
                nodeData = {'number':['-']*nCycles,'Rfactor':['-']*nCycles,'Rfree':['-']*nCycles,'rmsBonds':['-']*nCycles}
                cycleNodes = self.xmlnode.findall('.//'+tag+'/Cycle')
                for iCycleNode, cycleNode in enumerate(cycleNodes):
                    try: nodeData['number'][int(cycleNode.findall('number')[0].text)] = cycleNode.findall('number')[0].text
                    except: pass
                    try: nodeData['Rfactor'][int(cycleNode.findall('number')[0].text)] = cycleNode.findall('r_factor')[0].text
                    except: pass
                    try: nodeData['Rfree'][int(cycleNode.findall('number')[0].text)] = cycleNode.findall('r_free')[0].text
                    except: pass
                    try: nodeData['rmsBonds'][int(cycleNode.findall('number')[0].text)] = cycleNode.findall('rmsBonds')[0].text
                    except: pass

                # Get indices of nodes to include in the current table
                offset = 1
                if nodeData['Rfactor'][nCycles-1] == '-': offset = 2
                nodeSelect = [0, nCycles-offset-1, nCycles-offset]
                if nCycles-offset <= 0: nodeSelect = [0]
                if nCycles-offset == 1: nodeSelect = [0, 1]
                print("nodeSelect",nodeSelect)

                progressTable = progressTableDiv.addTable(style="height:250px; width:260px;float:left;", outputXml=self.outputXml, internalId=internalId)
                print("number",[nodeData['number'][i] for i in nodeSelect])
                print("Rfactors",[nodeData['Rfactor'][i] for i in nodeSelect])
                print("Rfree",[nodeData['Rfree'][i] for i in nodeSelect])
                print("rmsBonds",[nodeData['rmsBonds'][i] for i in nodeSelect])
                progressTable.addData(title="Cycle", data=[nodeData['number'][i] for i in nodeSelect])
                progressTable.addData(title="R-factor", data=[nodeData['Rfactor'][i] for i in nodeSelect])
                rfree_data = [nodeData['Rfree'][i] for i in nodeSelect]
                rmsBond_data = [nodeData['rmsBonds'][i] for i in nodeSelect]
                if not rfree_data.count('-') == len(rfree_data):
                   progressTable.addData(title="R-free",   expr="x if float(x)>=0.0 else '-'", data=rfree_data)
                if not rmsBond_data.count('-') == len(rmsBond_data):
                   progressTable.addData(title="Bond RMSD",   expr="x if float(x)>=0.0 else '-'", data=rmsBond_data)


    def addByWeightResults(self, parent, xmlnode):
        if parent is None: parent = self
        if True:# FIXME len(self.xmlnode.findall("./RefmacOptimiseWeight"))>0:
            #I *do not know* why This is needed
            clearingDiv = parent.addDiv(style="clear:both;")
            byWeightsFold = parent.addFold(label="Results by weight",initiallyOpen=True,brief='By weight')

            #Sort refmacweight nodes in order of increasing weight parameter
            refmacWeightNodes = list(self.xmlnode.findall(".//RefmacWeight"))
            sortedRefmacNodes = sorted(refmacWeightNodes, key=lambda residue: float(residue.findall("weight")[-1].text))
            rootNode = self.xmlnode
            #Remove unsorted nodes and put in sorted ones
            for refmacWeightNode in refmacWeightNodes:
                rootNode.remove(refmacWeightNode)
            for sortedRefmacNode in sortedRefmacNodes:
                rootNode.append(sortedRefmacNode)

            endpointSummaryTable = byWeightsFold.addTable(select=".//RefmacWeight",style="width:260px;height:250px; float:left;")
            endpointSummaryTable.addData(title="Weight", select="weight")
            endpointSummaryTable.addData(title="R-factor", select="REFMAC/Overall_stats/stats_vs_cycle/new_cycle[last()]/r_factor")
            endpointSummaryTable.addData(title="R-free",   select="REFMAC/Overall_stats/stats_vs_cycle/new_cycle[last()]/r_free",   expr="x if float(x)>=0.0 else '-'")
            endpointSummaryTable.addData(title="RMS Deviations", subtitle="Bond", select="REFMAC/Overall_stats/stats_vs_cycle/new_cycle[last()]/rmsBOND", expr="x if float(x)>=0.0 else '-'")
            endpointSummaryTable.addData(title="RMS Deviations", subtitle="Angles", select="REFMAC/Overall_stats/stats_vs_cycle/new_cycle[last()]/rmsANGLE", expr="x if float(x)>=0.0 else '-'")

            byWeightGraph = byWeightsFold.addFlotGraph(title='Stats by weight ', select="RefmacWeight/REFMAC/Overall_stats/stats_vs_cycle/new_cycle[last()]",style="width:400px;height:250px;float:left;")
            byWeightGraph.addData(title="Weight",    select=".//RefmacWeight/weight")
            byWeightGraph.addData(title="R_Factor", select="r_factor")
            byWeightGraph.addData(title="R_Free",  select="r_free")
            byWeightGraph.addData(title="RMS_Bondsx100", select="rmsBOND", expr="str(float(x)*100.)")
            byWeightGraph.addData(title="RMS_Angles",  select="rmsANGLE")

            plot = byWeightGraph.addPlotObject()
            plot.append('title','R Factors as a function of weight matrix term')
            plot.append('plottype','xy')
            for coordinate, colour in [(2,'blue'),(3,'red')]:
                plotLine = plot.append('plotline',xcol=1,ycol=coordinate)
                plotLine.append('colour',colour)

            plot = byWeightGraph.addPlotObject()
            plot.append('title','Geometry as a function of weight matrix term')
            plot.append('plottype','xy')
            for coordinate, colour in [(4,'blue'),(5,'red')]:
                plotLine = plot.append('plotline',xcol=1,ycol=coordinate)
                plotLine.append('colour',colour)

            clearingFold = byWeightsFold.addDiv(style="width:760px; clear:both;")

            graphsByWeightFold = byWeightsFold.addFold(label='Details for each weight',brief='Details')
            refmacWeightNodes = xmlnode.findall('./RefmacWeight')
            for refmacWeightNode in refmacWeightNodes:
                self.addOutputForWeight(refmacWeightNode=refmacWeightNode, parent=graphsByWeightFold)

    def addOutputForWeight(self, refmacWeightNode=None, parent=None):
        if parent is None: parent = self
        if refmacWeightNode is None: refmacWeightNode = self.xmlnode
        if len(refmacWeightNode.findall('./REFMAC'))>0:
            refmacReportNode = refmacWeightNode.findall('./REFMAC')[0]
            refmacReport = servalcat_report.servalcat_report(xmlnode=refmacReportNode, jobStatus='nooutput')
        if refmacReport is not None:
            refmacReport.addSummary(parent = parent)

def test(xmlFile=None,jobId=None,reportFile=None):
    import sys,os
    try:
        text = open( xmlFile ).read()
        xmlnode = ET.fromstring( text, PARSER() )
    except:
        print('FAILED loading XML file:', kw['xmlFile'])
    if reportFile is None and xmlFile is not None:
        reportFile = os.path.join(os.path.split(xmlFile)[0],'report.html')
    r = servalcat_pipe_report(xmlFile=xmlFile,jobId=jobId, xmlnode=xmlnode)
    r.as_html_file(reportFile)

if __name__ == "__main__":
    import sys
    servalcat_pipe_report(xmlFile=sys.argv[1],jobId=sys.argv[2])
